# Homeserver details
homeserver:
    # The address that this appservice can use to connect to the homeserver.
    address: http://synapse:8008
    # The domain of the homeserver (also known as server_name, used for MXIDs, etc).
    domain: localhost
    # What software is the homeserver running?
    # Standard Matrix homeservers like Synapse, Dendrite and Conduit should just use "standard" here.
    software: standard
    # The URL to push real-time bridge status to.
    # If set, the bridge will make POST requests to this URL whenever a user's whatsapp connection state changes.
    status_endpoint: null
    # Endpoint for reporting per-message status.
    message_send_checkpoint_endpoint: null
    # Does the homeserver support https://github.com/matrix-org/matrix-spec-proposals/pull/2246?
    async_media: false

# Application service host/registration related details
# Changing these values requires regeneration of the registration.
appservice:
    # The address that the homeserver can use to connect to this appservice.
    address: http://whatsapp-bridge:29318

    # The hostname and port where this appservice should listen.
    hostname: 0.0.0.0
    port: 29318
    # The maximum body size of appservice API requests (from the homeserver) in mebibytes
    # Usually 1 is enough, but on high-traffic bridges you might need to increase this to avoid HTTP 413 errors
    max_body_size: 1

    # The full URI to the database. SQLite and Postgres are supported.
    # Format examples:
    #   SQLite:   sqlite:///filename.db
    #   Postgres: postgres://username:password@hostname/dbname
    database: postgres://synapse:synapse_password@postgres:5432/whatsapp_bridge

    # Public part of web server for out-of-Matrix interaction with the bridge.
    # Used for things like login if the bridge supports it.
    public:
        # Whether or not the public-facing endpoints should be enabled.
        enabled: true
        # The prefix to use in the public-facing endpoints.
        prefix: /public
        # The base URL where the public-facing endpoints are available. The prefix is not added
        # implicitly.
        external: http://localhost:29318/public

    # The unique ID of this appservice.
    id: whatsapp
    # Username of the appservice bot.
    bot_username: whatsappbot
    # Display name and avatar for bot. Set to "remove" to remove display name/avatar, leave empty
    # to leave display name/avatar as-is.
    bot_displayname: WhatsApp bridge bot
    bot_avatar: mxc://maunium.net/NeXNQarUbIuKQGXRNMphFzDl

    # Community ID for bridged users (flattened) and rooms.
    # Must be created manually or not set. If not set, rooms will show up in a list of DMs.
    # Changing these values requires regeneration of the registration.
    community_id: +whatsapp:localhost

    # Authentication tokens for AS <-> HS communication. Autogenerated; do not modify.
    as_token: "wapbridge_as_token_2024"
    hs_token: "wapbridge_hs_token_2024"

# WhatsApp client configuration
whatsapp:
    # OS name to report to WhatsApp. This is only used for the "WhatsApp Web" text in the mobile app.
    os_name: Mautrix-WhatsApp bridge
    # Browser name to report to WhatsApp.
    browser_name: unknown

# Bridge config
bridge:
    # Localpart template of MXIDs for WhatsApp users.
    # {{.}} is replaced with the phone number of the WhatsApp user.
    username_template: "whatsapp_{{.}}"
    # Displayname template for WhatsApp users.
    # {{.DisplayName}} - Full name from WhatsApp
    # {{.Phone}} - Phone number (international format)
    # {{.BusinessName}} - Business name (if applicable)
    displayname_template: "{{.DisplayName}} (WA)"
    # Should the bridge create a space for each logged-in user and add bridged rooms to it?
    # Users who logged in before turning this on should run `!wa sync-space` to create and fill the space.
    personal_filtering_spaces: false
    # Should Matrix m.notice-type messages be bridged?
    bridge_notices: true
    # Set this to true to tell the bridge to re-send m.bridge events to all rooms on the next run.
    # This field will automatically be changed back to false after it, except if the config file is not writable.
    resend_bridge_info: false
    # When using double puppeting, should muted chats be muted in Matrix?
    mute_bridging: false
    # When using double puppeting, should archived chats be moved to a specific tag in Matrix?
    # Note that this doesn't seem to work properly in Element as of 2021-02-26.
    archive_tag: null
    # Same as above, but for pinned chats. The favorite tag is called m.favourite
    pinned_tag: null
    # Should the bridge update the m.direct account data event when double puppeting is enabled.
    # Note that updating the m.direct event is not atomic (except with mautrix-asmux)
    # and is therefore prone to race conditions.
    tag_only_on_create: true
    # Should the bridge create a space for each logged-in user and add bridged rooms to it?
    enable_status_broadcast: true
    # Should the bridge send a read receipt from the bridge bot when a message has been sent to WhatsApp?
    send_presence_on_typing: false
    # Should the bridge use custom puppets to cross-post messages sent from other WhatsApp clients
    # to Matrix instead of discarding them completely?
    #
    # **This feature is discouraged and should only be used if absolutely necessary.**
    # Instead of enabling this, you should encourage all your users to use the bridge's official
    # WhatsApp Business API Mode, which handles multi-device properly.
    #
    # The bridge uses /sync with the ?full_state=true query parameter to get the current state of the room.
    # This is potentially expensive and may be rate-limited by the server.
    # The bridge will automatically stop trying to enable custom puppets if it gets a 429 response.
    #
    # Provisioning API is used to log into the custom puppet, so it must be enabled too.
    use_custom_puppets: true
    # Should the bridge create groups for each WhatsApp group?
    create_group_on_invite: true
    # Whether or not to enable disappearing messages in Matrix.
    disappearing_messages_in_rooms: false
    # Whether or not to enable disappearing messages in private chats.
    disappearing_messages_in_private: false
    # Whether or not to delete disappearing messages only when the disappearing messages timer is reached.
    disable_disappearing_messages: false
    # Whether or not the bridge should skip consecutive messages that are the same.
    skip_identical: false
    # Whether or not bridged messages should only be replied to WhatsApp if the sender is a WhatsApp user.
    only_handle_whatsapp_replies: false
    # Whether or not to use space-separated args when parsing commands.
    # When true, arguments are separated by spaces and can be quoted.
    # When false, arguments are separated by newlines (legacy behavior).
    use_space_separated_args: true

    # Permissions for using the bridge.
    # Permitted values:
    #   relay - Talk through the relaybot (if enabled), no access otherwise
    #     user - Access to use the bridge to chat with a WhatsApp account.
    #    admin - User level and some additional administration tools
    # Permitted keys:
    #        * - All Matrix users
    #   domain - All users on that homeserver
    #     mxid - Specific user
    permissions:
        "localhost": "user"
        "@admin:localhost": "admin"

    # Whether or not relay mode should be allowed. If allowed, `!wa set-relay` can be used to turn any
    # authenticated user into a relaybot for that chat.
    relay:
        # Whether or not relay mode is enabled.
        enabled: false
        # Should only admins be allowed to set themselves as relay users?
        admin_only: true
        # The formats to use when sending messages to WhatsApp via the relaybot.
        message_formats:
            m.text: '<b>{{ .Sender.Displayname }}</b>: {{ .Message }}'
            m.notice: '<b>{{ .Sender.Displayname }}</b>: {{ .Message }}'
            m.emote: '* <b>{{ .Sender.Displayname }}</b> {{ .Message }}'
            m.file: '<b>{{ .Sender.Displayname }}</b> sent a file'
            m.image: '<b>{{ .Sender.Displayname }}</b> sent an image'
            m.audio: '<b>{{ .Sender.Displayname }}</b> sent an audio file'
            m.video: '<b>{{ .Sender.Displayname }}</b> sent a video'
            m.location: '<b>{{ .Sender.Displayname }}</b> sent a location'

    # Python regular expression to match links that should be previewed in WhatsApp (only for messages
    # sent from Matrix). These links will be included in the WhatsApp message even if send_whatsapp_edits
    # is disabled. Use an empty string to disable.
    url_previews: ""

    # Should the bridge send typing notifications when users on WhatsApp are typing?
    whatsapp_thumbnail_quality: 1
    allow_user_invite: false

    # Settings for handling history sync payloads.
    history_sync:
        # Should the bridge create portals for chats in the history sync payload?
        create_portals: true
        # Should the bridge encrypt history sync payloads (only available with SQLite)?
        encrypt: false
        # Should the bridge send history sync notifications to the user after it's done?
        # This requires the create_portals setting to be enabled.
        double_puppet_backfill: false
        # Should the bridge request a full sync from the phone when logging in?
        # This bumps the size of history syncs significantly, but will provide better coverage.
        request_full_sync: false

    # End-to-bridge encryption support options.
    #
    # See https://docs.mau.fi/bridges/general/end-to-bridge-encryption.html for more info.
    encryption:
        # Allow encryption, work in group chat rooms with e2ee enabled
        allow: false
        # Default to encryption, force-enable encryption in all portals the bridge creates
        # This will cause the bridge bot to be in private chats for the encryption to work properly.
        default: false
        # Whether to use MSC2409/MSC3202 instead of /sync long polling for receiving encryption-related data.
        appservice: false
        # Require encryption, drop any unencrypted messages.
        require: false
        # Enable key sharing? If enabled, key requests for rooms where users are in will be fulfilled.
        # You must use a client that supports requesting keys from other users to use this feature.
        allow_key_sharing: false
        # Options for deleting megolm sessions from the bridge.
        delete_keys:
            # Beeper-specific: delete outbound sessions when hungryserv confirms
            # that the user has uploaded the key to key backup.
            delete_outbound_on_ack: false
            # Don't store outbound sessions in the inbound table.
            dont_store_outbound: false
            # Ratchet megolm sessions forward after decrypting messages.
            ratchet_on_decrypt: false
            # Delete fully used keys (index >= max_messages) after decrypting messages.
            delete_fully_used_on_decrypt: false
            # Delete previous megolm sessions from same device when receiving a new one.
            delete_prev_on_new_session: false
            # Delete megolm sessions received from a device when the device is deleted.
            delete_on_device_delete: false
            # Periodically delete megolm sessions when 2x max_age has passed since receiving them.
            periodically_delete_expired: false
            # Delete inbound megolm sessions that don't have the may_include_expired flag.
            delete_outdated_inbound: false
        # What level of device verification should be required from users?
        #
        # Valid levels:
        #   unverified - Send keys to all device in the room.
        #   cross-signed-untrusted - Require valid cross-signing, but allow self-signed master keys.
        #   cross-signed-tofu - Require valid cross-signing, trust master keys on first use (and reject changes).
        #   cross-signed-verified - Require valid cross-signing, plus manual verification of users (not yet implemented).
        verification_levels:
            # Minimum level for which the bridge should send keys to when bridging messages from WhatsApp to Matrix.
            receive: unverified
            # Minimum level that the bridge should accept for incoming Matrix messages.
            send: unverified
            # Minimum level that the bridge should require for accepting key requests.
            share: cross-signed-tofu
        # Options for Megolm room key rotation. These options allow you to
        # configure the m.room.encryption event content. See:
        # https://spec.matrix.org/v1.3/client-server-api/#mroomencryption
        rotation:
            # Enable custom Megolm room key rotation.
            enable_custom: false
            # The maximum number of milliseconds a session should be used
            # before changing it. The Matrix spec recommends 604800000 (a week).
            milliseconds: 604800000
            # The maximum number of messages that should be sent with a given a session
            # before changing it. The Matrix spec recommends 100.
            messages: 100

        # Settings for provisioning API
        provisioning:
            # Whether or not the provisioning API should be enabled.
            enabled: true
            # The prefix to use in the provisioning API endpoints.
            prefix: /_matrix/provision
            # The shared secret to authorize users of the API.
            # Set to "generate" to generate and save a new token.
            shared_secret: generate
            # Enable debug API at /debug with provisioning authentication.
            debug_endpoints: false

# Logging config. See https://github.com/tulir/zeroconfig for details.
logging:
    version: 1
    formatters:
        colored:
            (): mautrix.util.logging.color.ColorFormatter
            format: '[%(asctime)s] [%(levelname)s@%(name)s] %(message)s'
        normal:
            format: '[%(asctime)s] [%(levelname)s@%(name)s] %(message)s'
    handlers:
        file:
            class: logging.handlers.RotatingFileHandler
            formatter: colored
            filename: /data/bridge.log
            maxBytes: 10485760
            backupCount: 10
        console:
            class: logging.StreamHandler
            formatter: colored
    loggers:
        mau:
            level: DEBUG
        whatsmeow:
            level: DEBUG
        aiohttp:
            level: INFO
    root:
        level: DEBUG
        handlers: [file, console]